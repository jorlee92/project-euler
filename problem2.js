/* 
    Problem:    
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

let foundNumbers = {};
function getFibNumber(number){
    // This feels like it should speed it up a bit, by allowing you to avoid calculating values over and over again. 
    // Pulling a value out should be instant. 
    if (foundNumbers[number]){
        return foundNumbers[number];
    }
    if(number === 1){
        return 1;
    } 
    if (number === 2){
        return 2;
    }
    else {
        foundNumbers[number] = getFibNumber(number - 1) + getFibNumber(number - 2);
        return foundNumbers[number];
    }
}

console.log(getFibNumber(10));

function getSumOfEvenTerms(){
    let sum = 0;
    let number = 1;
    let currentResult = getFibNumber(number);
    while(currentResult < 4000000){
        if(currentResult % 2 === 0){
            sum += currentResult;
        }
        number++;
        currentResult = getFibNumber(number);
    }
    return sum;
}

console.log(getSumOfEvenTerms())